package com.internship.pairist.service;import com.internship.pairist.model.Team;import com.internship.pairist.repository.TeamRepository;import com.internship.pairist.service.TeamService;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.TestInstance;import org.mockito.ArgumentCaptor;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.boot.test.mock.mockito.MockBean;import java.util.LinkedList;import java.util.List;import java.util.Optional;import static org.junit.jupiter.api.Assertions.*;import static org.mockito.Mockito.*;@TestInstance(TestInstance.Lifecycle.PER_CLASS)@SpringBootTestpublic class TeamServiceTest {    private TeamService teamService;    @MockBean    private TeamRepository teamRepository;    @BeforeAll    public void setup(){        this.teamService = new TeamService(teamRepository);    }    @Test    void findAll_returnsAllTeams(){        LinkedList<Team> expectedTeams = new LinkedList<>();        when(teamRepository.findAll()).thenReturn(expectedTeams);        List actualTeams = teamService.findAll();        assertEquals(0, actualTeams.size());        verify(teamRepository, times(1)).findAll();        assertSame(expectedTeams,actualTeams);    }    @Test    void addTeam_addsOneTeam() {        Team team = new Team();        String team_name = "team1";        team.setName(team_name);        String pword = "password";        team.setPassword(pword);        when(teamRepository.save(any(Team.class))).thenReturn(team);        Team actualTeam = teamService.addTeam(team_name, pword);        ArgumentCaptor<Team> teamCaptor = ArgumentCaptor.forClass(Team.class);        verify(teamRepository).save(teamCaptor.capture());        Team capturedArgument = teamCaptor.getValue();        assertEquals(team_name, capturedArgument.getName());        assertEquals(pword, capturedArgument.getPassword());        assertSame(team, actualTeam);    }    @Test    void addTeam_addsAnotherTeam() {        Team team = new Team();        String team_name = "team2";        team.setName(team_name);        String pword = "password2";        team.setPassword(pword);        when(teamRepository.save(any(Team.class))).thenReturn(team);        ArgumentCaptor<Team> teamCaptor = ArgumentCaptor.forClass(Team.class);        Team actualTeam = teamService.addTeam(team_name, pword);        verify(teamRepository).save(teamCaptor.capture());        Team capturedArgument = teamCaptor.getValue();        assertEquals(team_name, capturedArgument.getName());        assertEquals(pword, capturedArgument.getPassword());        assertSame(team, actualTeam);    }    @Test    void verifyPassword_correctPW() {        Team team = new Team();        String team_name = "team3";        team.setName(team_name);        String pword = "password3";        team.setPassword(pword);        when(teamRepository.findByName(team_name)).thenReturn(team);        Optional<Team> actualVerification = teamService.verifyPassword(team_name, pword);        verify(teamRepository).findByName(team_name);        assertTrue(actualVerification.isPresent());        assertSame(team, actualVerification.get());    }    @Test    void verifyPassword_incorrectPW() {        Team team = new Team();        String team_name = "team3";        team.setName(team_name);        String pword = "password3";        String wrong_pword = "password";        team.setPassword(pword);        when(teamRepository.findByName(team_name)).thenReturn(team);        Optional<Team> actualVerification = teamService.verifyPassword(team_name, wrong_pword);        verify(teamRepository).findByName(team_name);        assertTrue(actualVerification.isEmpty());    }}